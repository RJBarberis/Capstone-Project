{"files":{"pxt.json":"{\n    \"name\": \"Timers\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Timers and executation control.\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"timers.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.2.6\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","main.ts":"\n","README.md":"# Timers ![Build status badge](https://github.com/microsoft/arcade-timers/workflows/MakeCode/badge.svg)\n\n## Usage\n\nThis extension adds helper functions for debouncing, throttling, delaying and running code in the background.\n\n### “After X do” / aka setTimeout\n\n![9302a9b1d40cb3c3519e3ee9b373cff46a8ec6f1](https://user-images.githubusercontent.com/6453828/90668526-10a23080-e205-11ea-90a6-61de42c24745.gif)\n\n### “Separately do” / aka run in background thread\n\n![2279b1075112eae10b5861bbee0e26bf31712d30](https://user-images.githubusercontent.com/6453828/90668527-11d35d80-e205-11ea-91a5-2504873a3a8d.gif)\n\n### “after Y settled for X do” / aka debounce\n\n![d16b80463f90b10561e16ebd5f9931d1d6f4d84b](https://user-images.githubusercontent.com/6453828/90668533-13048a80-e205-11ea-97ed-5db7e795de58.gif)\n\n### “for Y at most once every X do” / aka throttle\n\n![8c69c7612ff407785725cfa3935b2013381e256e](https://user-images.githubusercontent.com/6453828/90668535-1435b780-e205-11ea-9b57-9814f1d6f5f7.gif)\n\n\n## Use this extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open https://arcade.makecode.com/\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for the URL of this repository and import\n\n## Edit this extension\n\nTo edit this repository in MakeCode.\n\n* open https://arcade.makecode.com/\n* click on **Import** then click on **Import URL**\n* paste the repository URL and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/microsoft/arcade-timers/raw/master/.makecode/blocks.png)\n\n## Supported targets\n\n* for PXT/arcade\n* for PXT/arcade\n(The metadata above is needed for package search.)\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n","timers.ts":"//% color=#700204 icon=\"\\uf254\"\n//% groups='[]'\nnamespace timer {\n    /**\n     * After a certain amount of time, the attached code will run.\n     * Blocks after this one will run without waiting.\n     */\n    //% block=\"after $time do\"\n    //% time.defl=500\n    //% handlerStatement=1\n    //% %time=timePicker ms\"\n    export function after(time: number, thenDo: () => void) {\n        setTimeout(thenDo, time)\n    }\n\n    /**\n     * Run the attached code seperately from other code.\n     * This creates a seperate context for \"pause\" so that pauses\n     * within or without this code are seperated.\n     */\n    //% block=\"separately do\"\n    //% handlerStatement=1\n    export function background(then: () => void) {\n        control.runInBackground(then)\n    }\n\n    let decounceTimeouts: {[key: string]: number} = {}\n    /**\n     * After this block hasn't been called with the given key\n     * for a certain amount of time run the attached code.\n     * Also known as \"debounce\".\n     */\n    //% block=\"after $key settled for $time do\"\n    //% time.defl=500\n    //% key.defl=\"action\"\n    //% handlerStatement=1\n    //% %time=timePicker ms\"\n    export function debounce(key: string, time: number, thenDo: () => void) {\n        if (decounceTimeouts[key]) {\n            clearTimeout(decounceTimeouts[key])\n        }\n        decounceTimeouts[key] = setTimeout(thenDo, time)\n    }\n\n    let throttleTimeouts: { [key: string]: number } = {}\n    /**\n     * Ensure that the attached code isn't run more than\n     * once per time interval for the given key.\n     * Also known as \"throttle\".\n     */\n    //% block=\"for $key at most once every $time do\"\n    //% time.defl=500\n    //% key.defl=\"action\"\n    //% handlerStatement=1\n    //% %time=timePicker ms\"\n    export function throttle(key: string, time: number, thenDo: () => void) {\n        if (!throttleTimeouts[key]) {\n            thenDo();\n            throttleTimeouts[key] = setTimeout(() => {\n                throttleTimeouts[key] = null;\n            }, time)\n        }\n    }\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}